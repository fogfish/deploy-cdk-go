name: deploy-cdk-go
author: fogfish

description: |
  deploys AWS CDK Golang applications to AWS   

inputs:
  go-version:
    description: |
      The version of Golang to use. 
    required: true
    default: 1.18

  command:
    description: |
      AWS CDK command to run inside the workflow.
      The action allows to `deploy` or `destroy` application.
      Use the command to automate clean-up of cloud environments.
    required: true
    default: 'deploy'

  stack:
    description: |
      Name of AWS CDK stack from the application.
    required: true

  version:
    description: |
      Version label of the stack.
    required: true
    default: 'latest'

  aws-access-key:
    description: |
      AWS Access Key. Use GitHub Secret Vault feature.
    required: true

  aws-secret-key:
    description: |
      AWS Secret Access Key. Use GitHub Secret Vault feature.
    required: true

  aws-region:
    description: |
      AWS Region.
    required: true

  issue-to-comment:
    description: |
      Number of GitHub issue to report the progress of deployment.
    required: false
    default: ''

  skip-status-comment:
    description: |
      Skip comments about the deployment status, output only deployed endpoints.
    required: false
    default: false

  issue-to-create:
    description: |
      Path to issue template to be opened while deployment is going on.  
    required: false
    default: ''

  issue-on-error:
    description: |
      Create issue if action fails
    required: false
    default: ''

outputs:
  issue-number:
    description: |
      Output issue number created by the action
    value: ${{ steps.issue.outputs.issue-number }}

  deployed-api:
    description: |
      Reference to deployed api
    value: ${{ steps.discover.outputs.target }}
      

runs:
  using: "composite"
  steps:
    ##
    ## Opens the "deployment" issue
    - uses: peter-evans/create-issue-from-file@v4.0.1
      id: issue
      if: ${{ inputs.issue-to-create != '' }} 
      with:
        title: ${{ inputs.command }} `${{ inputs.version }}` of `${{ inputs.stack }}`
        content-filepath: ${{ inputs.issue-to-create }}

    ##
    ## Comment progress of deployment
    - uses: peter-evans/create-or-update-comment@v3.1.0
      if: ${{ (inputs.issue-to-create != '') && (inputs.issue-to-comment != '') }}
      with:
        issue-number: ${{ steps.issue.outputs.issue-number }}
        body: |
          see #${{ inputs.issue-to-comment }}
          ${{ inputs.command }} `${{ inputs.version }}` of **${{ inputs.stack }}**

    - uses: peter-evans/create-or-update-comment@v3.1.0
      if: ${{ (inputs.issue-to-create != '') && (inputs.issue-to-comment != '') }}
      with:
        issue-number: ${{ inputs.issue-to-comment }}
        body: |
          see #${{ steps.issue.outputs.issue-number }}
          ${{ inputs.command }} `${{ inputs.version }}` of **${{ inputs.stack }}**

    ##
    ## Setup environment
    - uses: actions/setup-go@v4
      with:
        go-version: ${{ inputs.go-version }}
        cache: true

    - name: setup-cdk
      shell: bash
      run: |
        npm install -g aws-cdk

    - name: aws access
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key }}
        aws-secret-access-key: ${{ inputs.aws-secret-key }}
        aws-region: ${{ inputs.aws-region }}

    ##
    ## Deploy
    - name: cdk deploy
      if: ${{ inputs.command  == 'deploy' }}
      shell: bash
      run: |
        cdk ${{ inputs.command }} -e '${'${{ inputs.stack }}/%.version/${{ inputs.version }}'}' \
          -c vsn=${{ inputs.version }} \
          --outputs-file $GITHUB_WORKSPACE/stack.json
      env:
        GOPATH: /home/runner/go
        GOCACHE: /home/runner/.cache/go-build
        GOMODCACHE: /home/runner/go/pkg/mod

    - name: cdk destroy
      if: ${{ inputs.command  == 'destroy' }}
      shell: bash
      run: |
        cdk ${{ inputs.command }} -e -f '${'${{ inputs.stack }}/%.version/${{ inputs.version }}'}' \
          -c vsn=${{ inputs.version }} \
          --outputs-file $GITHUB_WORKSPACE/stack.json
      env:
        GOPATH: /home/runner/go
        GOCACHE: /home/runner/.cache/go-build
        GOMODCACHE: /home/runner/go/pkg/mod

    ##
    ## Discover url of deployed api and runs api testing   
    - id: discover
      shell: bash
      run: |
        echo target=$(jq -r '.["'${'${{ inputs.stack }}/%.version/${{ inputs.version }}'}'"] | to_entries | .[] | select(.key|test("GatewayEndpoint.*")) | .value ' < $GITHUB_WORKSPACE/stack.json) >> $GITHUB_OUTPUT

    ##
    ## Comment progress of deployment
    - uses: peter-evans/create-or-update-comment@v3.1.0
      if: ${{ (inputs.issue-to-comment != '') && (steps.discover.outputs.target != '') }} 
      with:
        issue-number: ${{ inputs.issue-to-comment }}
        body: |
          ${{ inputs.command }} `${{ inputs.version }}` of **${{ inputs.stack }}** is completed:
          - **url**: ${{ steps.discover.outputs.target }}
        reactions: rocket

    - uses: peter-evans/create-or-update-comment@v3.1.0
      if: ${{ (inputs.skip-status-comment != 'true') && (inputs.issue-to-comment != '') && (steps.discover.outputs.target == '') }} 
      with:
        issue-number: ${{ inputs.issue-to-comment }}
        body: |
          ${{ inputs.command }} `${{ inputs.version }}` of **${{ inputs.stack }}** is completed.
        reactions: rocket

    ##
    ## Close the "deployment" issue
    - uses: peter-evans/close-issue@v3.0.1
      if: ${{ (inputs.issue-to-create != '') && (steps.discover.outputs.target != '') }} 
      with:
        issue-number: ${{ steps.issue.outputs.issue-number }}
        comment: |
          ${{ inputs.command }} `${{ inputs.version }}` of **${{ inputs.stack }}** is completed:
          - **url**: ${{ steps.discover.outputs.target }}

    - uses: peter-evans/close-issue@v3.0.1
      if: ${{ (inputs.issue-to-create != '') && (steps.discover.outputs.target == '') }} 
      with:
        issue-number: ${{ steps.issue.outputs.issue-number }}
        comment: |
          ${{ inputs.command }} `${{ inputs.version }}` of **${{ inputs.stack }}** is completed.

    ##
    ##
    - uses: peter-evans/create-issue-from-file@v4.0.1
      if: ${{ failure() && inputs.issue-on-error != '' }} 
      with:
        title: Failed to ${{ inputs.command }} `${{ inputs.version }}` of `${{ inputs.stack }}`
        content-filepath: ${{ inputs.issue-on-error }}

